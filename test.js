require('dotenv').config();
const { Telegraf } = require('telegraf');

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
const chatId = process.env.TELEGRAM_CHAT_ID;

bot.telegram.sendMessage(chatId, "‚úÖ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ Solana Scanner!")
    .then(() => console.log("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!"))
    .catch(err => console.error("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞:", err));






// require('dotenv').config();
// const { Connection, clusterApiUrl, PublicKey } = require('@solana/web3.js');
// const { Telegraf } = require('telegraf');
// const axios = require('axios');

// const connection = new Connection(clusterApiUrl('mainnet-beta'), 'confirmed');
// const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
// const telegramChatId = process.env.TELEGRAM_CHAT_ID;

// const MIN_HOLDERS = 5; // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–æ–ª–¥–µ—Ä—ñ–≤
// const MAX_RAYDIUM_CHECKS = 3; // –û–±–º–µ–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ Raydium
// const SUSPICIOUS_WORDS = ["pump", "scam", "test", "fake", "rug", "shib", "doge", "moon", "100x", "airdrop", "free", "elon"];
// const checkedTokens = new Set();

// // ‚úÖ –§—É–Ω–∫—Ü—ñ—è –∑–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
// async function delay(ms) {
//     return new Promise(resolve => setTimeout(resolve, ms));
// }

// // ‚úÖ –§—É–Ω–∫—Ü—ñ—è `retry` –¥–ª—è API-–∑–∞–ø–∏—Ç—ñ–≤
// async function fetchWithRetry(url, retries = 3) {
//     for (let i = 0; i < retries; i++) {
//         try {
//             const response = await axios.get(url);
//             return response.data;
//         } catch (error) {
//             if (error.response?.status === 429 && i < retries - 1) {
//                 console.warn(`‚ö†Ô∏è 429 Too Many Requests. –ü–æ–≤—Ç–æ—Ä—é—î–º–æ... (${i + 1}/${retries})`);
//                 await delay(10000 * (i + 1)); // –î–∏–Ω–∞–º—ñ—á–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞
//             } else if (error.response?.status === 404) {
//                 return null; // ‚úÖ –Ü–≥–Ω–æ—Ä—É—î–º–æ 404 (—Ç–æ–∫–µ–Ω –ø—Ä–æ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ)
//             } else {
//                 console.error(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É ${url}:`, error.message);
//                 return null;
//             }
//         }
//     }
// }

// // ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–ª–∞—Å–Ω–∏–∫—ñ–≤ —Ç–æ–∫–µ–Ω–∞ (Solana RPC)
// async function getHoldersCount(tokenAddress) {
//     await delay(2000 + Math.random() * 3000); // –î–∏–Ω–∞–º—ñ—á–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ 2-5 —Å–µ–∫—É–Ω–¥
//     try {
//         const accounts = await connection.getTokenAccountsByOwner(new PublicKey(tokenAddress), {
//             programId: new PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")
//         });
//         return accounts.value.length;
//     } catch (error) {
//         console.error(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–ª–∞—Å–Ω–∏–∫—ñ–≤ –¥–ª—è ${tokenAddress}:`, error.message);
//         return 0;
//     }
// }

// // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ –Ω–∞ Raydium (–æ–±–º–µ–∂–µ–Ω–∞)
// async function hasLiquidityOnRaydium(tokenAddress, checkCount) {
//     if (checkCount >= MAX_RAYDIUM_CHECKS) {
//         console.log(`‚è≥ –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É Raydium –¥–ª—è ${tokenAddress}, –±–æ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ ${MAX_RAYDIUM_CHECKS} —Ç–æ–∫–µ–Ω—ñ–≤.`);
//         return false;
//     }

//     await delay(3000 + Math.random() * 5000); // –î–∏–Ω–∞–º—ñ—á–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ 3-8 —Å–µ–∫—É–Ω–¥
//     const url = `https://api.raydium.io/v2/sdk/liquidity/${tokenAddress}`;
//     const response = await fetchWithRetry(url);
//     return response && response.hasOwnProperty("lpMint");
// }

// // ‚úÖ –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 50 –±–ª–æ–∫—ñ–≤
// async function scanForNewTokens() {
//     console.log("üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –±–ª–æ–∫—á–µ–π–Ω—É...");

//     try {
//         const latestSlot = await connection.getSlot();
//         for (let slot = latestSlot; slot > latestSlot - 50; slot--) {
//             await delay(2000 + Math.random() * 3000);
//             const block = await connection.getBlock(slot, { maxSupportedTransactionVersion: 0 });

//             if (!block || !block.transactions) {
//                 console.log(`‚ö†Ô∏è –°–ª–æ—Ç ${slot} –ø–æ—Ä–æ–∂–Ω—ñ–π.`);
//                 continue;
//             }

//             console.log(`üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –±–ª–æ–∫—É: ${slot}, –∑–Ω–∞–π–¥–µ–Ω–æ ${block.transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π`);
//             await processBlock(block);
//         }
//     } catch (error) {
//         console.error("‚ö†Ô∏è –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:", error.message);
//     }
// }

// // ‚úÖ –û–±—Ä–æ–±–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤
// async function processBlock(block) {
//     let foundTokens = [];
//     let raydiumChecks = 0; // –õ—ñ—á–∏–ª—å–Ω–∏–∫ –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –Ω–∞ Raydium

//     for (const tx of block.transactions) {
//         if (!tx.meta || !tx.meta.postTokenBalances) continue;

//         for (const token of tx.meta.postTokenBalances) {
//             await delay(2000 + Math.random() * 3000);
//             try {
//                 if (!token.mint || checkedTokens.has(token.mint)) continue;
//                 checkedTokens.add(token.mint);

//                 const tokenAddress = token.mint;
//                 console.log(`üîé –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω: ${tokenAddress}`);

//                 // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö –Ω–∞–∑–≤
//                 if (SUSPICIOUS_WORDS.some(word => tokenAddress.toLowerCase().includes(word))) {
//                     console.log(`‚ö†Ô∏è –¢–æ–∫–µ–Ω ${tokenAddress} –º–∞—î –ø—ñ–¥–æ–∑—Ä—ñ–ª—É –Ω–∞–∑–≤—É. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ.`);
//                     continue;
//                 }

//                 // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ö–æ–ª–¥–µ—Ä—ñ–≤
//                 const holdersCount = await getHoldersCount(tokenAddress);
//                 if (holdersCount < MIN_HOLDERS) {
//                     console.log(`‚ö†Ô∏è –¢–æ–∫–µ–Ω ${tokenAddress} –º–∞—î –ª–∏—à–µ ${holdersCount} —Ö–æ–ª–¥–µ—Ä—ñ–≤. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ.`);
//                     continue;
//                 }

//                 // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ (–Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ —Ç–æ–∫–µ–Ω–∏)
//                 if (raydiumChecks < MAX_RAYDIUM_CHECKS) {
//                     const hasLiquidity = await hasLiquidityOnRaydium(tokenAddress, raydiumChecks);
//                     if (!hasLiquidity) {
//                         console.log(`‚ö†Ô∏è –¢–æ–∫–µ–Ω ${tokenAddress} –Ω–µ –º–∞—î –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ.`);
//                         continue;
//                     }
//                     raydiumChecks++; // –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ Raydium
//                 }

//                 // ‚úÖ –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –ø—Ä–æ–π—à–æ–≤ –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ‚Äì –¥–æ–¥–∞—î–º–æ
//                 foundTokens.push(`üîπ **–ê–¥—Ä–µ—Å–∞:** [${tokenAddress}](https://solscan.io/token/${tokenAddress})`);
//                 console.log(`‚úÖ –î–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É: ${tokenAddress}`);
//             } catch (err) {
//                 console.error(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ç–æ–∫–µ–Ω–∞ ${token.mint}:`, err.message);
//             }
//         }
//     }

//     // ‚úÖ –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω—ñ–≤ –≤ Telegram
//     if (foundTokens.length > 0) {
//         const message = `üöÄ **–ù–æ–≤—ñ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ñ —Ç–æ–∫–µ–Ω–∏ Solana!**\n\n${foundTokens.join("\n\n")}`;
//         await bot.telegram.sendMessage(telegramChatId, message, { parse_mode: "Markdown" });
//     } else {
//         console.log("‚ÑπÔ∏è –ñ–æ–¥–Ω–æ–≥–æ –≤–∞—Ä—Ç–æ–≥–æ —É–≤–∞–≥–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
//     }
// }

// // ‚úÖ –ó–∞–ø—É—Å–∫ –∫–æ–∂–Ω—ñ 60 —Å–µ–∫—É–Ω–¥
// setInterval(scanForNewTokens, 60000);
// bot.launch();
// console.log("‚úÖ –°–∫–∞–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ...");