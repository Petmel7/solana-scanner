
require('dotenv').config();
const { Connection, clusterApiUrl, PublicKey } = require('@solana/web3.js');
const { Telegraf } = require('telegraf');
const axios = require('axios');

const connection = new Connection(clusterApiUrl('mainnet-beta'), 'confirmed');
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
const telegramChatId = process.env.TELEGRAM_CHAT_ID;

const MIN_HOLDERS = 10; // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–æ–ª–¥–µ—Ä—ñ–≤
const SUSPICIOUS_WORDS = ["pump", "scam", "test", "fake", "rug", "shib", "doge", "moon", "100x", "airdrop", "free", "elon"];
const checkedTokens = new Set();

// ‚úÖ –§—É–Ω–∫—Ü—ñ—è –∑–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
async function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–ª–∞—Å–Ω–∏–∫—ñ–≤ —Ç–æ–∫–µ–Ω–∞ (Solana RPC)
async function getHoldersCount(tokenAddress) {
    await delay(2000 + Math.random() * 3000);
    try {
        const accounts = await connection.getTokenAccountsByOwner(new PublicKey(tokenAddress), {
            programId: new PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")
        });
        return accounts.value.length;
    } catch (error) {
        console.error(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–ª–∞—Å–Ω–∏–∫—ñ–≤ –¥–ª—è ${tokenAddress}:`, error.message);
        return 0;
    }
}

// ‚úÖ –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 50 –±–ª–æ–∫—ñ–≤
async function scanForNewTokens() {
    console.log("üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –±–ª–æ–∫—á–µ–π–Ω—É...");

    try {
        const latestSlot = await connection.getSlot();
        for (let slot = latestSlot; slot > latestSlot - 50; slot--) {
            await delay(2000 + Math.random() * 3000);
            const block = await connection.getBlock(slot, { maxSupportedTransactionVersion: 0 });

            if (!block || !block.transactions) {
                console.log(`‚ö†Ô∏è –°–ª–æ—Ç ${slot} –ø–æ—Ä–æ–∂–Ω—ñ–π.`);
                continue;
            }

            console.log(`üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –±–ª–æ–∫—É: ${slot}, –∑–Ω–∞–π–¥–µ–Ω–æ ${block.transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π`);
            await processBlock(block);
        }
    } catch (error) {
        console.error("‚ö†Ô∏è –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:", error.message);
    }
}

// ‚úÖ –û–±—Ä–æ–±–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤
async function processBlock(block) {
    for (const tx of block.transactions) {
        if (!tx.meta || !tx.meta.postTokenBalances) continue;

        for (const token of tx.meta.postTokenBalances) {
            await delay(2000 + Math.random() * 3000);
            try {
                if (!token.mint || checkedTokens.has(token.mint)) continue;
                checkedTokens.add(token.mint);

                const tokenAddress = token.mint;
                console.log(`üîé –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω: ${tokenAddress}`);

                // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö –Ω–∞–∑–≤
                if (SUSPICIOUS_WORDS.some(word => tokenAddress.toLowerCase().includes(word))) {
                    console.log(`‚ö†Ô∏è –¢–æ–∫–µ–Ω ${tokenAddress} –º–∞—î –ø—ñ–¥–æ–∑—Ä—ñ–ª—É –Ω–∞–∑–≤—É. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ.`);
                    continue;
                }

                // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ö–æ–ª–¥–µ—Ä—ñ–≤
                const holdersCount = await getHoldersCount(tokenAddress);
                if (holdersCount < MIN_HOLDERS) {
                    console.log(`‚ö†Ô∏è –¢–æ–∫–µ–Ω ${tokenAddress} –º–∞—î –ª–∏—à–µ ${holdersCount} —Ö–æ–ª–¥–µ—Ä—ñ–≤. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ.`);
                    continue;
                }

                // ‚úÖ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –æ–∫—Ä–µ–º–æ
                const message = `üöÄ **–ù–æ–≤–∏–π —Ç–æ–∫–µ–Ω –∑–Ω–∞–π–¥–µ–Ω–æ!**\n\nüîπ **–ê–¥—Ä–µ—Å–∞:** [${tokenAddress}](https://solscan.io/token/${tokenAddress})`;
                await bot.telegram.sendMessage(telegramChatId, message, { parse_mode: "Markdown" });

                console.log(`‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ Telegram: ${tokenAddress}`);

            } catch (err) {
                console.error(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ç–æ–∫–µ–Ω–∞ ${token.mint}:`, err.message);
            }
        }
    }
}

// ‚úÖ –ó–∞–ø—É—Å–∫ –∫–æ–∂–Ω—ñ 60 —Å–µ–∫—É–Ω–¥
setInterval(scanForNewTokens, 60000);
bot.launch();
console.log("‚úÖ –°–∫–∞–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ...");
