// require('dotenv').config();
// const { Connection, clusterApiUrl, PublicKey } = require('@solana/web3.js');
// const { Telegraf } = require('telegraf');

// const connection = new Connection(clusterApiUrl('mainnet-beta'), 'confirmed');
// const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
// const telegramChatId = process.env.TELEGRAM_CHAT_ID;

// // Solana Token Program
// const TOKEN_PROGRAM_ID = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA';

// async function delay(ms) {
//     return new Promise(resolve => setTimeout(resolve, ms));
// }

// async function scanForNewTokens() {
//     console.log('üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –±–ª–æ–∫—á–µ–π–Ω—É Solana...');

//     try {
//         const latestSlot = await connection.getSlot();

//         for (let slot = latestSlot; slot > latestSlot - 1; slot--) { // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–µ–Ω 5-–π –±–ª–æ–∫
//             await delay(1000); // –ó–∞—Ç—Ä–∏–º–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º

//             try {
//                 const block = await connection.getBlock(slot, {
//                     maxSupportedTransactionVersion: 0
//                 });

//                 if (!block || !block.transactions) {
//                     console.log(`‚ö†Ô∏è –°–ª–æ—Ç ${slot} –ø—Ä–æ–ø—É—â–µ–Ω–æ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π.`);
//                     continue;
//                 }

//                 await processBlock(block);
//             } catch (error) {
//                 console.error(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–ª–æ–∫—É ${slot}: ${error.message}`);
//                 continue;
//             }
//         }
//     } catch (error) {
//         console.error('‚ö†Ô∏è –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error.message);
//     }
// }

// async function processBlock(block) {
//     let foundTokens = 0;

//     for (const tx of block.transactions) {
//         if (!tx.meta || !tx.meta.postTokenBalances) continue; // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤

//         for (const token of tx.meta.postTokenBalances) {
//             try {
//                 if (!token.mint) continue; // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ, —è–∫—â–æ –Ω–µ–º–∞—î –∞–¥—Ä–µ—Å–∏ —Ç–æ–∫–µ–Ω–∞

//                 const tokenAddress = token.mint;
//                 const tokenSupply = await connection.getTokenSupply(new PublicKey(tokenAddress));

//                 if (!tokenSupply.value) continue; // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î supply
//                 const supply = tokenSupply.value.uiAmount;

//                 if (supply > 100) { // –î–æ–¥–∞—î–º–æ –≤—Å—ñ —Ç–æ–∫–µ–Ω–∏ –∑ supply > 0
//                     await delay(1000);
//                     await bot.telegram.sendMessage(
//                         telegramChatId,
//                         `üöÄ –ù–æ–≤–∏–π —Ç–æ–∫–µ–Ω —É Solana!\n–ê–¥—Ä–µ—Å–∞: ${tokenAddress}\nSupply: ${supply}`
//                     );
//                     console.log(`‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ç–æ–∫–µ–Ω: ${tokenAddress}`);
//                     foundTokens++;
//                 }
//             } catch (err) {
//                 console.error('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ç–æ–∫–µ–Ω–∞:', err.message);
//             }
//         }
//     }

//     if (foundTokens === 0) {
//         console.log('‚ÑπÔ∏è –ù–æ–≤–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
//     }
// }

// // –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞ –∫–æ–∂–Ω—ñ 60 —Å–µ–∫—É–Ω–¥
// setInterval(scanForNewTokens, 60000);
// bot.launch();
// console.log('‚úÖ –°–∫–∞–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ...');








// require('dotenv').config();
// const { Connection, clusterApiUrl, PublicKey } = require('@solana/web3.js');
// const { Telegraf } = require('telegraf');
// const axios = require('axios');

// const connection = new Connection(clusterApiUrl('mainnet-beta'), 'confirmed');
// const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
// const telegramChatId = process.env.TELEGRAM_CHAT_ID;

// const MIN_SUPPLY = 10000; // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π supply, —â–æ–± —Ç–æ–∫–µ–Ω –≤–≤–∞–∂–∞–≤—Å—è "–≤–∞—Ä—Ç–∏–º —É–≤–∞–≥–∏"
// const SUSPICIOUS_WORDS = ["pump", "scam", "test", "fake", "rug"];

// // –ö–µ—à –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤
// const checkedTokens = new Set();

// async function delay(ms) {
//     return new Promise(resolve => setTimeout(resolve, ms));
// }

// // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ç–æ–∫–µ–Ω —î –Ω–∞ CoinGecko
// async function isTokenListed(tokenAddress) {
//     try {
//         await delay(2000); // ‚è≥ –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—é API
//         const response = await axios.get("https://api.coingecko.com/api/v3/coins/markets", {
//             params: { vs_currency: "usd", per_page: 250, page: 1 }
//         });
//         return response.data.some(coin => coin.platforms?.solana === tokenAddress);
//     } catch (error) {
//         console.error("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ CoinGecko:", error.message);
//         return false;
//     }
// }

// // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —É —Ç–æ–∫–µ–Ω–∞ —î –±–∞–≥–∞—Ç–æ –≤–ª–∞—Å–Ω–∏–∫—ñ–≤
// async function hasManyHolders(tokenAddress) {
//     try {
//         await delay(2000); // ‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º
//         const accounts = await connection.getTokenLargestAccounts(new PublicKey(tokenAddress));
//         return accounts.value.length > 10; // –Ø–∫—â–æ –±—ñ–ª—å—à–µ 10 –≤–ª–∞—Å–Ω–∏–∫—ñ–≤, —Ç–æ–∫–µ–Ω –≤–≤–∞–∂–∞—î—Ç—å—Å—è –ø–æ–ø—É–ª—è—Ä–Ω–∏–º
//     } catch (error) {
//         console.error("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤–ª–∞—Å–Ω–∏–∫—ñ–≤ —Ç–æ–∫–µ–Ω–∞:", error.message);
//         return false;
//     }
// }

// // ‚úÖ –û—Å–Ω–æ–≤–Ω–∏–π —Å–∫–∞–Ω–µ—Ä –±–ª–æ–∫—á–µ–π–Ω—É
// async function scanForNewTokens() {
//     console.log("üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –±–ª–æ–∫—á–µ–π–Ω—É Solana...");

//     try {
//         const latestSlot = await connection.getSlot(); // –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å–ª–æ—Ç
//         await delay(1000); // ‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º
//         const block = await connection.getBlock(latestSlot, { maxSupportedTransactionVersion: 0 });

//         if (!block || !block.transactions) {
//             console.log(`‚ö†Ô∏è –°–ª–æ—Ç ${latestSlot} –ø–æ—Ä–æ–∂–Ω—ñ–π.`);
//             return;
//         }

//         await processBlock(block);
//     } catch (error) {
//         console.error("‚ö†Ô∏è –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:", error.message);
//     }
// }

// // ‚úÖ –û–±—Ä–æ–±–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤
// async function processBlock(block) {
//     let foundTokens = [];

//     for (const tx of block.transactions) {
//         if (!tx.meta || !tx.meta.postTokenBalances) continue;

//         for (const token of tx.meta.postTokenBalances) {
//             try {
//                 if (!token.mint || checkedTokens.has(token.mint)) continue;

//                 checkedTokens.add(token.mint); // ‚úÖ –î–æ–¥–∞—î–º–æ –≤ –∫–µ—à, —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –¥–≤—ñ—á—ñ
//                 const tokenAddress = token.mint;

//                 await delay(2000); // ‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º
//                 const tokenSupply = await connection.getTokenSupply(new PublicKey(tokenAddress));

//                 if (!tokenSupply.value) continue;
//                 const supply = tokenSupply.value.uiAmount;

//                 // üõë –§—ñ–ª—å—Ç—Ä: –≤—ñ–¥–∫–∏–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω–∏ –∑ –º–∞–ª–∏–º supply
//                 if (supply < MIN_SUPPLY) continue;

//                 // üõë –§—ñ–ª—å—Ç—Ä: –≤—ñ–¥–∫–∏–¥–∞—î–º–æ –ø—ñ–¥–æ–∑—Ä—ñ–ª—ñ –Ω–∞–∑–≤–∏
//                 if (SUSPICIOUS_WORDS.some(word => tokenAddress.toLowerCase().includes(word))) continue;

//                 // üõë –§—ñ–ª—å—Ç—Ä: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ CoinGecko
//                 const listed = await isTokenListed(tokenAddress);

//                 // üõë –§—ñ–ª—å—Ç—Ä: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–ª–∞—Å–Ω–∏–∫—ñ–≤
//                 const hasHolders = await hasManyHolders(tokenAddress);

//                 if (listed || hasHolders) {
//                     foundTokens.push(`üîπ **–ê–¥—Ä–µ—Å–∞:** [${tokenAddress}](https://solscan.io/token/${tokenAddress})\nSupply: ${supply}`);
//                     console.log(`‚úÖ –î–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É: ${tokenAddress}`);
//                 }
//             } catch (err) {
//                 console.error("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ç–æ–∫–µ–Ω–∞:", err.message);
//             }
//         }
//     }

//     if (foundTokens.length > 0) {
//         const message = `üöÄ **–ù–æ–≤—ñ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ñ —Ç–æ–∫–µ–Ω–∏ Solana!**\n\n${foundTokens.join("\n\n")}`;
//         await bot.telegram.sendMessage(telegramChatId, message, { parse_mode: "Markdown" });
//     } else {
//         console.log("‚ÑπÔ∏è –ñ–æ–¥–Ω–æ–≥–æ –≤–∞—Ä—Ç–æ–≥–æ —É–≤–∞–≥–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
//     }
// }

// // ‚úÖ –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞ –∫–æ–∂–Ω—ñ 60 —Å–µ–∫—É–Ω–¥
// setInterval(scanForNewTokens, 60000);
// bot.launch();
// console.log("‚úÖ –°–∫–∞–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ...");





require('dotenv').config();
const { Connection, clusterApiUrl, PublicKey } = require('@solana/web3.js');
const { Telegraf } = require('telegraf');
const axios = require('axios');

const connection = new Connection(clusterApiUrl('mainnet-beta'), 'confirmed');
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
const telegramChatId = process.env.TELEGRAM_CHAT_ID;
// const COINGECKO_API_KEY = process.env.COINGECKO_API_KEY;

const MIN_SUPPLY = 10000; // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π supply
const SUSPICIOUS_WORDS = ["pump", "scam", "test", "fake", "rug"];

// ‚úÖ –ü—Ä–∏–±–∏—Ä–∞—î–º–æ getTokenLargestAccounts (—Ç–∏–º—á–∞—Å–æ–≤–æ)
async function hasManyHolders(tokenAddress) {
    return true; // –í–≤–∞–∂–∞—î–º–æ, —â–æ –≤—Å—ñ —Ç–æ–∫–µ–Ω–∏ –º–∞—é—Ç—å –≤–ª–∞—Å–Ω–∏–∫—ñ–≤
}

// ‚úÖ –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–∞–º–∏
async function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤ CoinGecko
// const checkedCoinGecko = new Set();

// async function isTokenListed(tokenAddress) {
//     if (checkedCoinGecko.has(tokenAddress)) return true; // ‚úÖ –Ø–∫—â–æ —Ç–æ–∫–µ–Ω —É–∂–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ true

//     try {
//         await delay(5000);
//         const response = await axios.get("https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd&", {
//             params: {
//                 x_cg_demo_api_key: COINGECKO_API_KEY
//             }
//         });

//         console.log('‚úÖ response', response);

//         const listed = response.data.some(coin => coin.platforms?.solana === tokenAddress);
//         if (listed) checkedCoinGecko.add(tokenAddress); // ‚úÖ –î–æ–¥–∞—î–º–æ –≤ –∫–µ—à
//         return listed;
//     } catch (error) {
//         console.error("‚ö†Ô∏è CoinGecko –ø–æ–º–∏–ª–∫–∞:", error.message);
//         return false;
//     }
// }

const checkedCoinGecko = new Set();
const COINGECKO_API_KEY = process.env.COINGECKO_API_KEY; // ‚úÖ –ë–µ—Ä–µ–º–æ –∫–ª—é—á —ñ–∑ .env

async function isTokenListed(tokenAddress) {
    if (checkedCoinGecko.has(tokenAddress)) return true; // ‚úÖ –Ø–∫—â–æ —Ç–æ–∫–µ–Ω —É–∂–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ true

    try {
        await delay(5000);
        const response = await axios.get("https://api.coingecko.com/api/v3/coins/list", {
            params: {
                x_cg_demo_api_key: COINGECKO_API_KEY // ‚úÖ –î–æ–¥–∞—î–º–æ API-–∫–ª—é—á —É –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            }
        });

        console.log("‚úÖ API-–≤—ñ–¥–ø–æ–≤—ñ–¥—å CoinGecko:", response.data);

        const listed = response.data.some(coin => coin.platforms?.solana === tokenAddress);
        if (listed) checkedCoinGecko.add(tokenAddress); // ‚úÖ –î–æ–¥–∞—î–º–æ –≤ –∫–µ—à
        return listed;
    } catch (error) {
        console.error("‚ö†Ô∏è CoinGecko –ø–æ–º–∏–ª–∫–∞:", error.response?.data || error.message);
        return false;
    }
}

// async function isTokenListed(tokenAddress) {
//     try {
//         await delay(5000);
//         const response = await axios.get(`https://api.coingecko.com/api/v3/coins/markets`, {
//             params: {
//                 vs_currency: "usd",
//                 ids: "solana",
//                 x_cg_demo_api_key: COINGECKO_API_KEY // ‚úÖ –î–æ–¥–∞—î–º–æ –∫–ª—é—á —É –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
//             }
//         });

//         console.log("‚úÖ API-–≤—ñ–¥–ø–æ–≤—ñ–¥—å CoinGecko:", response.data);
//         return response.data.some(coin => coin.platforms?.solana === tokenAddress);
//     } catch (error) {
//         console.error("‚ö†Ô∏è CoinGecko –ø–æ–º–∏–ª–∫–∞:", error.response?.data || error.message);
//         return false;
//     }
// }

// ‚úÖ –û—Å–Ω–æ–≤–Ω–∏–π —Å–∫–∞–Ω–µ—Ä
async function scanForNewTokens() {
    console.log("üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –±–ª–æ–∫—á–µ–π–Ω—É...");

    try {
        const latestSlot = await connection.getSlot();
        await delay(5000); // –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º
        const block = await connection.getBlock(latestSlot, { maxSupportedTransactionVersion: 0 });

        if (!block || !block.transactions) {
            console.log(`‚ö†Ô∏è –°–ª–æ—Ç ${latestSlot} –ø–æ—Ä–æ–∂–Ω—ñ–π.`);
            return;
        }

        await processBlock(block);
    } catch (error) {
        console.error("‚ö†Ô∏è –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:", error.message);
    }
}

// ‚úÖ –û–±—Ä–æ–±–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤
async function processBlock(block) {
    let foundTokens = [];

    for (const tx of block.transactions) {
        if (!tx.meta || !tx.meta.postTokenBalances || tx.meta.postTokenBalances.length === 0) continue;

        const token = tx.meta.postTokenBalances[0]; // ‚úÖ –ë–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à–∏–π —Ç–æ–∫–µ–Ω —É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó

        try {
            if (!token.mint) continue;

            const tokenAddress = token.mint;

            await delay(5000); // ‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ RPC-–∑–∞–ø–∏—Ç–æ–º
            const tokenSupply = await connection.getTokenSupply(new PublicKey(tokenAddress));

            if (!tokenSupply.value) continue;
            const supply = tokenSupply.value.uiAmount;

            // üõë –§—ñ–ª—å—Ç—Ä: –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π supply
            if (supply < MIN_SUPPLY) continue;

            // üõë –§—ñ–ª—å—Ç—Ä: –ø—ñ–¥–æ–∑—Ä—ñ–ª—ñ —Å–ª–æ–≤–∞
            if (SUSPICIOUS_WORDS.some(word => tokenAddress.toLowerCase().includes(word))) continue;

            // üõë –§—ñ–ª—å—Ç—Ä: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤ CoinGecko
            const listed = await isTokenListed(tokenAddress);

            if (listed) {
                foundTokens.push(`üîπ **–ê–¥—Ä–µ—Å–∞:** [${tokenAddress}](https://solscan.io/token/${tokenAddress})\nSupply: ${supply}`);
                console.log(`‚úÖ –î–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É: ${tokenAddress}`);
            }
        } catch (err) {
            console.error("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ç–æ–∫–µ–Ω–∞:", err.message);
        }
    }

    if (foundTokens.length > 0) {
        const message = `üöÄ **–ù–æ–≤—ñ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ñ —Ç–æ–∫–µ–Ω–∏ Solana!**\n\n${foundTokens.join("\n\n")}`;
        await bot.telegram.sendMessage(telegramChatId, message, { parse_mode: "Markdown" });
    } else {
        console.log("‚ÑπÔ∏è –ñ–æ–¥–Ω–æ–≥–æ –≤–∞—Ä—Ç–æ–≥–æ —É–≤–∞–≥–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
    }
}

// ‚úÖ –ó–∞–ø—É—Å–∫ –∫–æ–∂–Ω—ñ 60 —Å–µ–∫—É–Ω–¥
setInterval(scanForNewTokens, 60000);
bot.launch();
console.log("‚úÖ –°–∫–∞–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ...");
