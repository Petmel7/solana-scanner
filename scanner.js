require('dotenv').config();
const { Connection, clusterApiUrl, PublicKey } = require('@solana/web3.js');
const { Telegraf } = require('telegraf');

// ‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä—ñ–≤–µ–Ω—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è "confirmed"
const connection = new Connection(clusterApiUrl('mainnet-beta'), 'confirmed');

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
const telegramChatId = process.env.TELEGRAM_CHAT_ID;

// ‚úÖ ID –ø—Ä–æ–≥—Ä–∞–º–∏ –¥–ª—è —Ç–æ–∫–µ–Ω—ñ–≤ —É Solana (Token Program)
const TOKEN_PROGRAM_ID = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA';

async function scanForNewTokens() {
    console.log('üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –±–ª–æ–∫—á–µ–π–Ω—É Solana...');

    try {
        // ‚úÖ –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–æ—Å—Ç—É–ø–Ω–∏–π –±–ª–æ–∫
        const latestBlock = await connection.getLatestBlockhash();
        const block = await connection.getBlock(latestBlock.lastValidBlockHeight, {
            maxSupportedTransactionVersion: 0
        });

        // console.log('‚úÖlatestBlock', latestBlock);
        // console.log('‚úÖblock', block);

        if (!block || !block.transactions) {
            console.log('‚ö†Ô∏è –ë–ª–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
            return;
        }

        let foundTokens = 0;

        for (const tx of block.transactions) {
            if (!tx.transaction?.message?.instructions) continue;

            for (const ix of tx.transaction.message.instructions) {
                if (ix.programId?.toBase58() === TOKEN_PROGRAM_ID) {
                    try {
                        if (!ix.keys || ix.keys.length === 0) continue;

                        const tokenAddress = new PublicKey(ix.keys[0].pubkey).toBase58();
                        const tokenSupply = await connection.getTokenSupply(new PublicKey(tokenAddress));

                        if (tokenSupply.value.uiAmount > 100) { // –§—ñ–ª—å—Ç—Ä: —Ç–æ–∫–µ–Ω–∏ –∑ supply > 100
                            await bot.telegram.sendMessage(
                                telegramChatId,
                                `üöÄ –ù–æ–≤–∏–π —Ç–æ–∫–µ–Ω —É Solana!\n–ê–¥—Ä–µ—Å–∞: ${tokenAddress}\nSupply: ${tokenSupply.value.uiAmount}`
                            );
                            console.log(`‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ç–æ–∫–µ–Ω: ${tokenAddress}`);
                            foundTokens++;
                        }
                    } catch (err) {
                        console.error('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ç–æ–∫–µ–Ω–∞:', err.message);
                    }
                }
            }
        }

        if (foundTokens === 0) {
            console.log('‚ÑπÔ∏è –ù–æ–≤–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
        }
    } catch (error) {
        console.error('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–ª–æ–∫—É:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞ –∫–æ–∂–Ω—ñ 60 —Å–µ–∫—É–Ω–¥
setInterval(scanForNewTokens, 60000);
bot.launch();
console.log('‚úÖ –°–∫–∞–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ...');
